import base64
import collections
import json
import os
import sqlite3
import threading
# import urllib.parse

from enum import Enum

import cherrypy
from mako.lookup import TemplateLookup


scriptdir = os.path.dirname(os.path.realpath(__file__))


class BaseUrlOverride(cherrypy.Tool):
    """Override the base URL

    When running behind a reverse proxy, the path of the proxy may differ from that of the CherryPy application. For instance, CherryPy may think it's running on http://localhost:8187/, but the reverse proxy makes it available as https://example.com/biblemunger. In that scenario, URLs generated by CherryPy in HTTP redirects, or in HTML, will be localhost URLs, and the reverse proxy will have to rewrite the HTML and/or HTTP headers by parsing the content and doing a regex replace on the URLs - not ideal from a speed or security perspective.

    Instead, you can use this tool to tell CherryPy to use a different base URL like so:

        cherrypy.tools.baseurloverride = util.BaseUrlOverride()
        cherrypy.tree.mount(server, '/', {
            '/': {
                'tools.baseurloverride.baseurl': 'https://example.com/biblemunger',
                'tools.baseurloverride.on': True}})
    """

    def __init__(self):
        cherrypy.Tool.__init__(self, 'before_request_body', self.setbaseurl, priority=10)

    def setbaseurl(self, baseurl=None):
        if baseurl:
            cherrypy.request.base = baseurl


class MakoHandler(cherrypy.dispatch.LateParamPageHandler):
    """Callable which sets response.body

    Note that we provide some additional variable substitutions to the template, which all templates that are rendered using this handler may use without explicitly passing. For instance, the 'baseurl' variable is the base URL of the application.
    """

    def __init__(self, template, next_handler, debug=False):
        self.template = template
        self.next_handler = next_handler
        self.debug = debug

    def __call__(self):

        def dataUriFromStaticFile(filename, datatype):
            """Given a file relative to the static/ directory, return a data: URI containing a representation in base64

            filename: A file, relative to the static/ directory
            datatype: A data type for the URL, such as "image/png"
            """
            filepath = os.path.join(scriptdir, 'static', filename)
            with open(filepath, 'rb') as f:
                encoded = base64.b64encode(f.read()).decode()
            return "data:{};base64,{}".format(datatype, encoded)

        env = globals().copy()
        env.update(self.next_handler())
        env.update({

            # The base URL of the application, wherever it's mounted
            'baseurl': cherrypy.url('/'),

            # A simple way to get a data: URL for a given static file
            'dataUriFromStaticFile': dataUriFromStaticFile,

            # Allow us to add useful debugging behavior at runtime
            'debug': self.debug})

        return self.template.render(**env)


class MakoLoader():
    """A CherryPy loader for Mako templates which caches the templates in memory when they are loaded first time"""

    def __init__(self):
        self.lookups = {}

    def __call__(self, filename, directories, module_directory=None, collection_size=-1, debug=False):
        # Find the appropriate template lookup.
        key = (tuple(directories), module_directory)
        try:
            lookup = self.lookups[key]
        except KeyError:
            lookup = TemplateLookup(
                directories=directories,
                module_directory=module_directory,
                collection_size=collection_size,
                input_encoding='utf-8',
                output_encoding='utf-8')
            self.lookups[key] = lookup
        cherrypy.request.lookup = lookup

        # Replace the current handler.
        cherrypy.request.template = lookup.get_template(filename)
        cherrypy.request.handler = MakoHandler(cherrypy.request.template, cherrypy.request.handler, debug=debug)


class DictEncoder(json.JSONEncoder):
    """JSON encoder for any object that can be encoded just by getting to its underlying .__dict__ attribute"""

    def default(self, obj):
        return obj.__dict__

    def cherrypy_json_handler(self, *args, **kwargs):
        """A handler for use with CherryPy

        Can be used like this:
            denc = DictEncoder()
            @cherrypy.tools.json_out(handler=denc.cherrypy_json_handler)
        """
        value = cherrypy.serving.request._json_inner_handler(*args, **kwargs)
        for chunk in self.iterencode(value):
            yield chunk.encode("utf-8")


class LockableSqliteConnection():
    """A `with`-able class that wraps a SQLite connection, a cursor, and a lock

    When the `with` statement is begun, the internal cursor object is allocated, and the internal lock is acquired. When the `with` statements terminates, the internal cursor object is closed, the internal connection object is committed, and the internal lock object is released. Exiting the `with` statement does *not* close the connection; the caller is responsible for this, but we do provide a convenience method to do it.

    Usable like so:

        lockableconn = LockableSqliteConnection("file:///some/database.sqlite?cache=shared")

        with lockableconn.ro as connection:
            connection.cursor.execute("SELECT * FROM SOMEWHERE")
            results = connection.cursor.fetchall()

        with lockableconn.rw as connection:
            connection.cursor.execute("INSERT SOMETHING INTO SOMEWHERE")

        lockableconn.close()

    **WARNING**: This class has the read/write property `LockableSqliteConnection.rw` and the read-only property `LockableSqliteConnection.ro`, but **the read-only property is not a security boundary**. It exists so that the class knows whether it needs to lock the database, NOT to enforce that database changes don't happen in SQL that you pass to its cursor. Using the `.rw` property will also handle commiting changes made in read/write mode, so if you're doing complicated database transactions which you might have to roll back halfway through, you will have to handle that yourself (or perhaps `LockableSqliteConnection` isn't a good tool for your use case).

    **WARNING**: Inside of the `with` statement, take care not to call other code that will use a `with` statement on the same LockableSqliteConnection object in read/write mode. This sounds obvious, but it's easy to do when the `with` statement might be in another function which is itself called inside a `with` statement. For instance, this code will deadlock, because `func2()` locks the connection until `func1()` completes, but `func1()` will not finish until the lock is released:

        lockableconn = LockablesqliteConnection("file:///some/database.sqlite?cache=shared")
        def func1():
            with lockableconn.rw as connection:
                connection.cursor.execute("SOME SQL HERE")
                results = connection.cursor.fetchall()
        def func2():
            with lockableconn.rw as connection:
                func1()

    This class is intended to take the place of more cumbersome syntax like:

        lock = threading.Lock()
        dbconn = sqlite3.connect("file:///some/database.sqlite?cache=shared", uri=True, check_same_thread=False)
        with lock:
            with dbconn as connection:
                cursor = connection.cursor()
                cursor.execute("SOME SQL HERE")
                results = cursor.fetchall()
                connection.commit()
                cursor.close()
    """

    class Lsc():

        def __init__(self, connection, rw=False):
            self.lock = threading.Lock()
            self.connection = connection
            self.cursor = None
            self.rw = rw

        def __enter__(self):
            if self.rw:
                self.lock.acquire()
            self.cursor = self.connection.cursor()
            return self

        def __exit__(self, type, value, traceback):
            if self.rw:
                self.connection.commit()
            # I've seen self.cursor be None before, but I'm not sure why
            if self.cursor is not None:
                self.cursor.close()
                self.cursor = None
            if self.rw:
                self.lock.release()

        def close(self):
            if self.rw:
                self.lock.acquire()
            if self.cursor:
                self.cursor.close()
            if self.connection:
                self.connection.close()
            if self.rw:
                self.lock.release()

    def __init__(self, dburi):

        def tryconnect(dburi):
            try:
                return sqlite3.connect(dburi, uri=True, check_same_thread=False)
            except Exception, exc:
                print(
                    "Failed to connect to database of URI '{}' with error '{}'".format(dburi, exc))
                raise

        roconn = tryconnect(dburi)
        rwconn = tryconnect(dburi)
        self.ro = self.Lsc(roconn)
        self.rw = self.Lsc(rwconn, rw=True)

    def __call__(self, mode='r'):
        if mode == 'r':
            return self.ro
        elif mode == 'w':
            return self.rw
        else:
            raise Exception("Invalid mode '{}'".format(mode))

    def close(self):
        """Close the underlying sqlite connections.

        Waits for current operations to finish. Renders the object basically useless.
        """
        self.ro.close()
        self.ro = None
        self.rw.close()
        self.rw = None


def normalizewhitespace(sql, formattokens=None):
    """A very stupid function that normalizes whitespace

    This lets me put arbitrary whitespace in a multi line string (the kind w/ 3 quote marks)

    It's useful for languages like SQL which sometimes need newlines and shit for readability, but for which whitespace is not important for execution

    It also lets me indent the text in my multi line strings in those scenarios
    """
    if isinstance(formattokens, str) or not isinstance(formattokens, collections.Iterable):
        formattokens = (formattokens, )
    return ' '.join(sql.split()).format(*tuple(formattokens))


class InitializationOption(Enum):
    """Options that control database table initialization

    NoAction:       Assume the table is already initialized
    InitIfNone      If the table doesn't exist, run the table creation SQL; if it does, do nothing
    Reinitialize:   Drop the table and then initialize it
    """

    NoAction = 0
    InitIfNone = 1
    Reinitialize = 2
